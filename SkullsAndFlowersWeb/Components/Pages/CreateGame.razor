@page "/create-game"
@rendermode InteractiveServer
@using SkullsAndFlowersWeb.Services
@using SkullsAndFlowersGame.CardSystem
@using SkullsAndFlowersWeb.Models
@inject DeckService DeckService
@inject GameService GameService
@inject NavigationManager NavigationManager

<PageTitle>Create New Game - Skulls And Flowers</PageTitle>

<div class="container-fluid">
    <div class="row justify-content-center mt-4">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h2>Create New Game</h2>
                </div>
                <div class="card-body">
                    @if (!deckNames.Any())
                    {
                        <div class="alert alert-warning">
                            <p>No decks found. Please create some decks in the <a href="deck-builder">Deck Builder</a> first.</p>
                        </div>
                    }
                    else
                    {
                        <EditForm Model="Model" OnValidSubmit="HandleValidSubmit" FormName="createGameForm">
                            <div class="mb-3">
                                <label for="gameId" class="form-label">Game ID</label>
                                <InputText id="gameId" @bind-Value="Model.GameId" class="form-control"/>
                                <div class="form-text">Enter a unique identifier for this game</div>
                            </div>


                            <div id="targ1" class="mb-3">
                                <label for="player1Deck" class="form-label">Player 1 Deck</label>
                                <InputSelect id="player1Deck" @bind-Value="Model.Player1DeckName" class="form-select">
                                    <option value="">-- Select a Deck --</option>
                                    @foreach (var deckName in deckNames)
                                    {
                                        <option value="@deckName">@deckName</option>
                                    }
                                </InputSelect>
                            </div>

                            <div id="targ2" class="mb-3">
                                <label for="player2Deck" class="form-label">Player 2 Deck</label>
                                <InputSelect id="player2Deck" @bind-Value="Model.Player2DeckName" class="form-select">
                                    <option value="">-- Select a Deck --</option>
                                    @foreach (var deckName in deckNames)
                                    {
                                        <option value="@deckName">@deckName</option>
                                    }
                                </InputSelect>
                            </div>

                            <div class="d-flex justify-content-between">
                                <a href="/" class="btn btn-secondary">Cancel</a>
                                <button type="submit" class="btn btn-primary">Create Game</button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<string> deckNames = new();
    [SupplyParameterFromForm]
    private CreateGameModel? Model { get; set; }
    
    protected override void OnInitialized()
    {
        deckNames = DeckService.GetSavedDeckNames().ToList();
        // Generate a random game ID
        Model ??= new()
            { GameId = $"game-{Guid.NewGuid().ToString().Substring(0, 8)}" };
    }

    private void HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(Model.Player1DeckName) || string.IsNullOrEmpty(Model.Player2DeckName))
        {
            return;
        }

        // Get the selected decks
        if (!DeckService.TryGetDeck(Model.Player1DeckName, out var deck1) || 
            !DeckService.TryGetDeck(Model.Player2DeckName, out var deck2))
        {
            return;
        }

        // Create the game
        var gameInstance = GameService.GetOrCreateGame(Model.GameId);
        GameService.SetupNewGame(Model.GameId, deck1, deck2);
        GameService.StartGame(Model.GameId);

        // Automatically navigate to the game page for player 0
        NavigationManager.NavigateTo($"/game/{Model.GameId}?playerId=0");
    }

    private class CreateGameModel
    {
        public string GameId { get; set; } = string.Empty;
        public string Player1DeckName { get; set; } = string.Empty;
        public string Player2DeckName { get; set; } = string.Empty;
    }
}