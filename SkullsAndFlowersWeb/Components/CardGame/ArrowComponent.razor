@rendermode InteractiveServer
@using SkullsAndFlowersWeb.Models
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<svg class="arrow-svg" id="@($"arrow-{Arrow.Id}")" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; z-index: 1000;">
    <defs>
        <marker id="@($"arrowhead-{Arrow.Id}")" markerWidth="12" markerHeight="8" refX="12" refY="4" orient="auto">
            <polygon points="0 0, 12 4, 0 8" fill="@Arrow.Color" />
        </marker>
    </defs>
    
    <!-- Arrow path -->
    <path id="@($"arrow-path-{Arrow.Id}")" 
          d="M0,0 L0,0" 
          stroke="@Arrow.Color" 
          stroke-width="@Arrow.StrokeWidth" 
          fill="none" 
          marker-end="url(#@($"arrowhead-{Arrow.Id}"))" />
    
    <!-- Text background -->
    <rect id="@($"arrow-text-bg-{Arrow.Id}")" 
          rx="4" ry="4" 
          fill="white" 
          stroke="@Arrow.Color" 
          stroke-width="1" />
    
    <!-- Text element - CRITICAL: NO STYLE PROPERTY FOR DISPLAY -->
    <text id="@($"arrow-text-{Arrow.Id}")"
          dy=".3em"
          text-anchor="middle"
          fill="@Arrow.Color"
          font-weight="bold"
          font-size="14px"
          style="pointer-events: all; cursor: pointer; user-select: none;"
          @onclick="@(() => DeleteArrow())">
        @Arrow.Text
    </text>
</svg>

@code {
    [Parameter]
    public Arrow Arrow { get; set; } = new Arrow();
    
    [Parameter]
    public EventCallback<Arrow> OnDelete { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Wait briefly to ensure DOM is ready
            await Task.Delay(50);
            await JSRuntime.InvokeVoidAsync("updateArrow", Arrow.Id, Arrow.SourceId, Arrow.TargetId, Arrow.Text);
            
            // Add animation after path is created
            await AnimateArrow();
        }
    }

    public async Task UpdatePosition()
    {
        await JSRuntime.InvokeVoidAsync("updateArrow", Arrow.Id, Arrow.SourceId, Arrow.TargetId, Arrow.Text);
    }
    
    private async Task AnimateArrow()
    {
        // Simple animation from source to target
        await JSRuntime.InvokeVoidAsync("eval", $@"
            (function() {{
                const path = document.getElementById('arrow-path-{Arrow.Id}');
                if (!path) return;
                
                const length = path.getTotalLength();
                
                // Set up the starting position
                path.style.strokeDasharray = length;
                path.style.strokeDashoffset = length;
                
                // Define animation
                path.style.animation = 'arrow-dash 0.5s ease-in-out forwards';
                
                // Add the keyframe animation if it doesn't exist
                if (!document.getElementById('arrow-animation-style')) {{
                    const style = document.createElement('style');
                    style.id = 'arrow-animation-style';
                    style.textContent = `
                        @keyframes arrow-dash {{
                            to {{
                                stroke-dashoffset: 0;
                            }}
                        }}
                    `;
                    document.head.appendChild(style);
                }}
                
                // Force text to be visible
                const text = document.getElementById('arrow-text-{Arrow.Id}');
                const textBg = document.getElementById('arrow-text-bg-{Arrow.Id}');
                if (text && textBg) {{
                    text.style.display = 'block';
                    textBg.style.display = 'block';
                    console.log('Text forced visible in animation handler');
                }}
            }})();
        ");
    }

    private async Task DeleteArrow()
    {
        await OnDelete.InvokeAsync(Arrow);
    }
}